package org.eclipse.rdf4j.testsuites.postgis.geometry.attribute;

import static org.junit.Assert.assertEquals;

import org.eclipse.rdf4j.model.Value;
import org.eclipse.rdf4j.model.ValueFactory;
import org.eclipse.rdf4j.model.impl.SimpleValueFactory;
import org.eclipse.rdf4j.query.algebra.evaluation.function.postgis.geometry.attribute.MinimumBoundingCircle;
import org.eclipse.rdf4j.query.algebra.evaluation.function.postgis.util.literals.vector.WKTDatatype;
import org.junit.jupiter.api.Test;

public class MinimumBoundingCircleTest {

	public static final String testPolygon="POLYGON((26426 65078,26531 65242,26075 65136,26096 65427,26426 65078))";
	
	public static final String result="POLYGON ((26532.27784830467 65267.114509082545, 26527.5234340705 65218.84213126972, 26513.442900840695 65172.42483386478, 26490.577355610825 65129.64640757588, 26459.805508460933 65092.15080333488, 26422.309904219932 65061.378956184984, 26379.531477931032 65038.51341095512, 26333.114180526092 65024.43287772532, 26284.84180271327 65019.678463491146, 26236.569424900445 65024.43287772532, 26190.152127495505 65038.51341095512, 26147.373701206605 65061.378956184984, 26109.878096965604 65092.15080333488, 26079.10624981571 65129.64640757588, 26056.24070458584 65172.42483386478, 26042.160171356038 65218.84213126972, 26037.405757121865 65267.114509082545, 26042.160171356038 65315.38688689537, 26056.24070458584 65361.80418430031, 26079.10624981571 65404.58261058921, 26109.878096965604 65442.07821483021, 26147.373701206605 65472.850061980105, 26190.152127495505 65495.715607209975, 26236.569424900445 65509.79614043977, 26284.84180271327 65514.550554673944, 26333.114180526092 65509.79614043977, 26379.531477931032 65495.71560720997, 26422.309904219932 65472.850061980105, 26459.805508460933 65442.07821483021, 26490.57735561083 65404.58261058921, 26513.442900840695 65361.80418430031, 26527.5234340705 65315.386886895365, 26532.27784830467 65267.114509082545))";

	
	@Test
	public void testMinimumBoundingCircle() {
		MinimumBoundingCircle instance=new MinimumBoundingCircle();
		ValueFactory valfac=SimpleValueFactory.getInstance();
		Value geo=valfac.createLiteral(testPolygon, WKTDatatype.LiteralIRI);
		Value resultt=instance.evaluate(valfac,geo);
		Value expResult=valfac.createLiteral(result, WKTDatatype.LiteralIRI);
		assertEquals(expResult, resultt);
	}
	
}
